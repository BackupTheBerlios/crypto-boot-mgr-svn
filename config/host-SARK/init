#!/bin/bash

echo "Shellscript called with parameters: \"$*\""

. /init.conf

mount -t proc /proc /proc
echo Mounted /proc filesystem

echo Mounting sysfs
mount -t sysfs none /sys

echo Creating /dev
mount -o mode=0755 -t tmpfs none /dev
mknod /dev/console c 5 1
mknod /dev/null c 1 3
mknod /dev/zero c 1 5
mkdir /dev/pts
mkdir /dev/shm

echo Starting udev
udevstart
echo -n "/sbin/hotplug" > /proc/sys/kernel/hotplug

echo Loading modules
KERNEL_VERSION=`uname -r`
MODULE_DIR=/lib/modules/$KERNEL_VERSION
insmod $MODULE_DIR/scsi_mod.ko 
insmod $MODULE_DIR/sd_mod.ko 
insmod $MODULE_DIR/libata.ko 
insmod $MODULE_DIR/ata_piix.ko 
insmod $MODULE_DIR/jbd.ko 
insmod $MODULE_DIR/ext3.ko 
insmod $MODULE_DIR/dm-mod.ko
insmod $MODULE_DIR/dm-crypt.ko
insmod $MODULE_DIR/aes-i586.ko
insmod $MODULE_DIR/ohci-hcd.ko
insmod $MODULE_DIR/uhci-hcd.ko
insmod $MODULE_DIR/usb-storage.ko

echo Waiting 6 seconds to detect USB devices
sleep 6

echo Running initial udev
udevstart

echo Creating device mapper special device
echo "mkdmnod" | nash --quiet

echo Unmounting tmpfs /sys
umount /sys

if [ "$1" = "rescue" ]
then
   echo "Rescue mode, starting shell, 'exit' to continue boot."
   bash
fi

echo Creating encrypted swap device

cryptsetup --cipher=aes --key-size=256 \
           --key-file=/dev/urandom \
           create swap0_crypt $SWAP_DEV_0

mkswap /dev/mapper/swap0_crypt

### Mount normal root file system version, now commented out
###
### echo "mkrootdev /dev/root" | /bin/nash --quiet
### mount -o defaults --ro -t ext3 /dev/root /sysroot

# Mount USB file system, copy key files to /etc, then unmount
echo Mounting USB file system
mount -o ro $USB_BOOT_PARTITION /usb

echo Copying encrypted keys from file system to ramdisk
cp $CRYPTO_KEY_DIR/fs*.crypt /etc

echo Unmounting USB file system
umount /usb

PASS_OK=0
while [ $PASS_OK -eq 0 ]
do
   read -s -p "Please enter passphrase for encrypted filesystems: " MY_PASS
   echo $MY_PASS > /etc/my-pass

   openssl enc -d -des3 -salt -pass file:/etc/my-pass \
           -in /etc/fs-root-${ROOT_DEV_NAME}.crypt \
           -out /etc/fs-root-${ROOT_DEV_NAME}.clear > /dev/null 2>&1

   OPENSSL_RC=$?

   if [ $OPENSSL_RC -eq 0 ]
   then
      echo ""
      echo "The passphrase is OK."
      PASS_OK=1
   else
      echo ""
      echo "The passphrase is incorrect, try again."
      shred /etc/my-pass /etc/fs-root-${ROOT_DEV_NAME}.clear
      rm -f /etc/my-pass /etc/fs-root-${ROOT_DEV_NAME}.clear
   fi
done

# Step 1: decrypt keys of remaining filesystems (if any),
#         then make passphrase data disappear.
#
echo "Calculating cleartext keys for all filesystems"

FS_ID=1

while [ $FS_ID -le $NUM_EXTRA_FS ]
do
   EXTRA_FS_VAR=EXTRA_FS_${FS_ID}
   eval EXTRA_FS_VAL=\$$EXTRA_FS_VAR
   EXTRA_FS_DEV_NAME_VAR=EXTRA_FS_DEV_NAME_${FS_ID}
   eval EXTRA_FS_DEV_NAME_VAL=\$$EXTRA_FS_DEV_NAME_VAR

   openssl enc -d -des3 -salt -pass file:/etc/my-pass             \
           -in  /etc/fs-${EXTRA_FS_VAL}-${EXTRA_FS_DEV_NAME_VAL}.crypt  \
           -out /etc/fs-${EXTRA_FS_VAL}-${EXTRA_FS_DEV_NAME_VAL}.clear  \
           > /dev/null 2>&1

   FS_ID=`expr $FS_ID + 1`
done

shred /etc/my-pass
rm -f /etc/my-pass

#
# Step 2: define device mapper "decrypted" devices
#         then make cleartext key data disappear.
#
echo "Defining device mapper encryption devices"

cryptsetup --cipher=aes --key-size=256 \
           --key-file=/etc/fs-root-${ROOT_DEV_NAME}.clear \
           create ${ROOT_DEV_NAME}_crypt $ROOT_DEV_FILE

FS_ID=1

while [ $FS_ID -le $NUM_EXTRA_FS ]
do
   EXTRA_FS_VAR=EXTRA_FS_${FS_ID}
   eval EXTRA_FS_VAL=\$$EXTRA_FS_VAR
   EXTRA_FS_DEV_NAME_VAR=EXTRA_FS_DEV_NAME_${FS_ID}
   eval EXTRA_FS_DEV_NAME_VAL=\$$EXTRA_FS_DEV_NAME_VAR
   EXTRA_FS_DEV_FILE_VAR=EXTRA_FS_DEV_FILE_${FS_ID}
   eval EXTRA_FS_DEV_FILE_VAL=\$$EXTRA_FS_DEV_FILE_VAR

   cryptsetup --cipher=aes --key-size=256  \
              --key-file=/etc/fs-${EXTRA_FS_VAL}-${EXTRA_FS_DEV_NAME_VAL}.clear  \
              create ${EXTRA_FS_DEV_NAME_VAL}_crypt $EXTRA_FS_DEV_FILE_VAL
   FS_ID=`expr $FS_ID + 1`
done

echo "Erasing traces of cleartext key material"
shred /etc/fs-*.clear
rm -f /etc/fs-*.clear

#
# Step 3: mount encrypted root filesystem
#
echo "Mounting encrypted root filesystem"
mount -o defaults --ro -t ext3 /dev/mapper/${ROOT_DEV_NAME}_crypt /sysroot

echo "Making RAMdisk device resources briefly visible for root filesystem switchover..."
mount -t tmpfs --bind /dev /sysroot/dev

echo "Switching over in 3 seconds to the normal init process..."
sleep 3
exec /bin/nash /init.final

